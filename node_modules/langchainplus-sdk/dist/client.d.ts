import { AsyncCallerParams } from "./utils/async_caller.js";
import { Dataset, Example, ExampleUpdate, Feedback, KVMap, Run, RunCreate, RunType, RunUpdate, ScoreType, TracerSession, TracerSessionResult, ValueType } from "./schemas.js";
import { RunEvaluator } from "./evaluation/evaluator.js";
interface ClientConfig {
    apiUrl?: string;
    apiKey?: string;
    callerOptions?: AsyncCallerParams;
    timeout_ms?: number;
}
interface ListRunsParams {
    projectId?: string;
    projectName?: string;
    executionOrder?: number;
    runType?: RunType;
    error?: boolean;
    id?: string[];
    limit?: number;
    offset?: number;
}
interface UploadCSVParams {
    csvFile: Blob;
    fileName: string;
    inputKeys: string[];
    outputKeys: string[];
    description?: string;
}
interface CreateRunParams {
    name: string;
    inputs: KVMap;
    run_type: RunType;
    execution_order?: number;
    id?: string;
    start_time?: number;
    end_time?: number;
    extra?: KVMap;
    error?: string;
    serialized?: object;
    outputs?: KVMap;
    reference_example_id?: string;
    child_runs?: RunCreate[];
    parent_run_id?: string;
    project_name?: string;
}
export declare class Client {
    private apiKey?;
    private apiUrl;
    private caller;
    private timeout_ms;
    constructor(config?: ClientConfig);
    static getDefaultClientConfig(): {
        apiUrl: string;
        apiKey?: string;
    };
    private validateApiKeyIfHosted;
    private get headers();
    private _get;
    createRun(run: CreateRunParams): Promise<void>;
    updateRun(runId: string, run: RunUpdate): Promise<void>;
    readRun(runId: string, { loadChildRuns }?: {
        loadChildRuns: boolean;
    }): Promise<Run>;
    private _loadChildRuns;
    listRuns({ projectId, projectName, executionOrder, runType, error, id, limit, offset, }: ListRunsParams): Promise<Run[]>;
    deleteRun(runId: string): Promise<void>;
    createProject({ projectName, projectExtra, mode, upsert, }: {
        projectName: string;
        projectExtra?: object;
        mode?: string;
        upsert?: boolean;
    }): Promise<TracerSession>;
    readProject({ projectId, projectName, }: {
        projectId?: string;
        projectName?: string;
    }): Promise<TracerSessionResult>;
    listProjects(): Promise<TracerSession[]>;
    deleteProject({ projectId, projectName, }: {
        projectId?: string;
        projectName?: string;
    }): Promise<void>;
    uploadCsv({ csvFile, fileName, inputKeys, outputKeys, description, }: UploadCSVParams): Promise<Dataset>;
    createDataset(name: string, { description }?: {
        description?: string;
    }): Promise<Dataset>;
    readDataset({ datasetId, datasetName, }: {
        datasetId?: string;
        datasetName?: string;
    }): Promise<Dataset>;
    listDatasets({ limit, offset, }?: {
        limit?: number;
        offset?: number;
    }): Promise<Dataset[]>;
    deleteDataset({ datasetId, datasetName, }: {
        datasetId?: string;
        datasetName?: string;
    }): Promise<void>;
    createExample(inputs: KVMap, outputs: KVMap, { datasetId, datasetName, createdAt, }: {
        datasetId?: string;
        datasetName?: string;
        createdAt?: Date;
    }): Promise<Example>;
    readExample(exampleId: string): Promise<Example>;
    listExamples({ datasetId, datasetName, limit, offset, }?: {
        datasetId?: string;
        datasetName?: string;
        limit?: number;
        offset?: number;
    }): Promise<Example[]>;
    deleteExample(exampleId: string): Promise<void>;
    updateExample(exampleId: string, update: ExampleUpdate): Promise<object>;
    evaluateRun(run: Run | string, evaluator: RunEvaluator, { sourceInfo, loadChildRuns, }?: {
        sourceInfo?: KVMap;
        loadChildRuns: boolean;
    }): Promise<Feedback>;
    createFeedback(runId: string, key: string, { score, value, correction, comment, sourceInfo, feedbackSourceType, }: {
        score?: ScoreType;
        value?: ValueType;
        correction?: string | object;
        comment?: string;
        sourceInfo?: object;
        feedbackSourceType?: "API" | "MODEL";
    }): Promise<Feedback>;
    readFeedback(feedbackId: string): Promise<Feedback>;
    deleteFeedback(feedbackId: string): Promise<void>;
    listFeedback({ runIds, limit, offset, }?: {
        runIds?: string[];
        limit?: number;
        offset?: number;
    }): Promise<Feedback[]>;
}
export {};
